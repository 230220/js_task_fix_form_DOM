{"mappings":"ACGc,SAAS,gBAAgB,CAAC,cAElC,OAAO,CAAC,SAAC,CAAf,EACE,IAAI,CAAC,SAAU,QAAS,SAAU,OAAO,CAAC,QAAQ,CAAC,EAAa,IAAI,GAIpE,IAAM,EAAa,AAAA,CAAA,EAAa,YAAY,CAAC,SAAW,EAAA,EAAI,IAAI,GAEhE,GAAK,GAIL,IAAM,EAAe,EAAU,MAAM,CAAC,GAAG,WAAW,GAAK,EAAU,KAAK,CAAC,GAEzE,EAAa,YAAY,CAAC,cAAe,GAEzC,IAAM,EAAgB,EAAa,UAAU,EAAI,EAC7C,EAAc,EAAc,aAAa,CAC1C,0BAA2D,MAAA,CAAlC,IAAI,MAAM,CAAC,EAAa,EAAE,EAAI,IAAI,OAGzD,IAEH,AADA,CAAA,EAAc,SAAS,aAAa,CAAC,QAArC,EACY,SAAS,CAAC,GAAG,CAAC,eAEtB,EAAa,EAAE,EACjB,EAAY,YAAY,CAAC,MAAO,EAAa,EAAE,EAEjD,EAAc,YAAY,CAAC,EAAa,IAE1C,EAAY,WAAW,CAAG,GAC5B","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\n// write code here\nvar input = document.querySelectorAll(\"form input\");\ninput.forEach(function(inputElement) {\n    if ([\n        \"submit\",\n        \"reset\",\n        \"button\",\n        \"file\"\n    ].includes(inputElement.type)) return;\n    var inputName = (inputElement.getAttribute(\"name\") || \"\").trim();\n    if (!inputName) return;\n    var textForLabel = inputName.charAt(0).toUpperCase() + inputName.slice(1);\n    inputElement.setAttribute(\"placeholder\", textForLabel);\n    var parentElement = inputElement.parentNode || inputElement;\n    var createLabel = parentElement.querySelector('label.field-label[for=\"'.concat(CSS.escape(inputElement.id || \"\"), '\"]'));\n    if (!createLabel) {\n        createLabel = document.createElement(\"label\");\n        createLabel.classList.add(\"field-label\");\n        if (inputElement.id) createLabel.setAttribute(\"for\", inputElement.id);\n        parentElement.insertBefore(createLabel, inputElement);\n    }\n    createLabel.textContent = inputName;\n});\n\n//# sourceMappingURL=index.7d6dbcaf.js.map\n","'use strict';\n\n// write code here\nconst input = document.querySelectorAll('form input');\n\ninput.forEach((inputElement) => {\n  if (['submit', 'reset', 'button', 'file'].includes(inputElement.type)) {\n    return;\n  }\n\n  const inputName = (inputElement.getAttribute('name') || '').trim();\n\n  if (!inputName) {\n    return;\n  }\n\n  const textForLabel = inputName.charAt(0).toUpperCase() + inputName.slice(1);\n\n  inputElement.setAttribute('placeholder', textForLabel);\n\n  const parentElement = inputElement.parentNode || inputElement;\n  let createLabel = parentElement.querySelector(\n    `label.field-label[for=\"${CSS.escape(inputElement.id || '')}\"]`,\n  );\n\n  if (!createLabel) {\n    createLabel = document.createElement('label');\n    createLabel.classList.add('field-label');\n\n    if (inputElement.id) {\n      createLabel.setAttribute('for', inputElement.id);\n    }\n    parentElement.insertBefore(createLabel, inputElement);\n  }\n  createLabel.textContent = inputName;\n});\n"],"names":["document","querySelectorAll","forEach","inputElement","includes","type","inputName","getAttribute","trim","textForLabel","charAt","toUpperCase","slice","setAttribute","parentElement","parentNode","createLabel","querySelector","concat","CSS","escape","id","createElement","classList","add","insertBefore","textContent"],"version":3,"file":"index.7d6dbcaf.js.map"}